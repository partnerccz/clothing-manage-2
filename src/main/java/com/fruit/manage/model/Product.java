package com.fruit.manage.model;

import com.fruit.manage.model.base.BaseProduct;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Product extends BaseProduct<Product> {

	public static final Product dao = new Product().dao();

	public Page<Record> page(Integer pageNum, Integer pageSize, Integer productId, Integer status, String fruitType, String recommendType, String country, Date start, Date end, String orderProp, String orderType) {
		if(pageNum == null || pageNum <= 0) {
			pageNum = 1;
		}
		if(pageSize == null || pageSize <= 0) {
			pageSize = 100;
		}
		if(pageSize > 1000) {
			pageSize = 1000;
		}
		String selectSql = "SELECT id,name,country,brand,fruit_type,sort,fresh_time,fresh_expire_time,fruit_des,store_way,create_time,update_time,total_sell_num,week_sell_num,status ";
		List<Object> params = new ArrayList<>();
		StringBuilder sql = new StringBuilder();
		if(recommendType != null) {
			sql.append("FROM b_product p JOIN b_product_recommend pr ON (pr.type=? AND p.id=pr.product_id) ");
		} else {
			sql.append("FROM b_product p ");
		}
		sql.append("WHERE 1=1 ");
		if(productId != null) {
			sql.append("AND p.product_id=? ");
			params.add(productId);
		}
		if(status != null) {
			sql.append("AND p.status=? ");
			params.add(status);
		}
		if(fruitType != null) {
			sql.append("AND p.fruit_type=? ");
			params.add(fruitType);
		}
		if(country != null) {
			sql.append("AND p.country=? ");
			params.add(country);
		}
		if(start != null) {
			sql.append("AND p.update_time>=? ");
			params.add(start);
		}
		if(end != null) {
			sql.append("AND p.end_time<=? ");
			params.add(end);
		}
		if(StrKit.isBlank(orderProp)) {
			orderProp = "update_time";
		}
		sql.append("ORDER BY ").append(orderProp).append(" ");
		if("descending".equals(orderType)) {
			sql.append("DESC ");
		}
		return Db.paginate(pageNum, pageSize, selectSql, sql.toString(), params.toArray());
	}
}
